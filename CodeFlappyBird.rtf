{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil Courier New;}{\f1\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue128;\red0\green0\blue0;\red128\green128\blue128;\red0\green0\blue255;\red0\green128\blue0;\red255\green255\blue255;}
{\*\generator Riched20 10.0.14393}\viewkind4\uc1 
\pard\box\brdrdash\brdrw0 \cbpat6\sa200\sl276\slmult1\cf1\b\f0\fs18\lang9 package \cf2\b0 com.ashishsingh.flappybird;\line\line\cf1\b import \cf2\b0 com.badlogic.gdx.ApplicationAdapter;\line\cf1\b import \cf2\b0 com.badlogic.gdx.Gdx;\line\cf1\b import \cf2\b0 com.badlogic.gdx.graphics.Color;\line\cf1\b import \cf2\b0 com.badlogic.gdx.graphics.Texture;\line\cf1\b import \cf2\b0 com.badlogic.gdx.graphics.g2d.BitmapFont;\line\cf1\b import \cf2\b0 com.badlogic.gdx.graphics.g2d.SpriteBatch;\line\cf1\b import \cf2\b0 com.badlogic.gdx.math.Circle;\line\cf1\b import \cf2\b0 com.badlogic.gdx.math.Intersector;\line\cf1\b import \cf2\b0 com.badlogic.gdx.math.Rectangle;\line\line\cf1\b import \cf2\b0 java.util.Random;\line\line\cf1\b public class \cf2\b0 FlappyBird \cf1\b extends \cf2\b0 ApplicationAdapter \{\line\tab SpriteBatch batch;\line\tab Texture background;\line     Texture bottomTube;\line     Texture topTube;\line\tab Texture gameover;\line\tab\cf3\i //ShapeRenderer shapeRenderer;\line\tab\cf2\i0 Circle birdCircle;\line\tab BitmapFont font;\line\line\tab\cf1\b public static \cf2\b0 Texture[] birds;\line\tab\cf1\b int \cf2\b0 flapState = \cf4 0\cf2 ;\line\tab\cf1\b int \cf2\b0 gameState = \cf4 0\cf2 ;\line\tab\cf1\b float \cf2\b0 birdY = \cf4 0\cf2 ;\line\tab\cf1\b float \cf2\b0 velocity = \cf4 0\cf2 ;\line\tab\cf1\b float \cf2\b0 gravity = \cf4 1\cf2 ;\line     \cf1\b int \cf2\b0 gap = \cf4 400\cf2 ;\line\line\tab\cf1\b float \cf2\b0 maxTubeOffset;\line\tab Random randomGenerator;\line\line\tab\cf1\b float \cf2\b0 tubeVelocity = \cf4 4\cf2 ;\line\tab\cf1\b int \cf2\b0 numberOfTubes = \cf4 4\cf2 ;\line\tab\cf1\b float\cf2\b0 [] tubex = \cf1\b new float\cf2\b0 [numberOfTubes];\line\tab\cf1\b float\cf2\b0 [] tubeOffset = \cf1\b new float\cf2\b0 [numberOfTubes];\line\tab\cf1\b float \cf2\b0 distanceBetweenTubes;\line\tab Rectangle[] topTubeRectangles;\line\tab Rectangle[] bottomTubeRectangle;\line     \cf1\b int \cf2\b0 score = \cf4 0\cf2 ;\line\tab\cf1\b int \cf2\b0 scoringTube = \cf4 0\cf2 ;\line\line\tab @Override\line\tab\cf1\b public void \cf2\b0 create () \{\line\line\line         gameover = \cf1\b new \cf2\b0 Texture(\cf5\b "gameover.png"\cf2\b0 );\line\tab\tab\cf3\i //shapeRenderer = new ShapeRenderer();\line\tab\tab\cf2\i0 birdCircle = \cf1\b new \cf2\b0 Circle();\line\tab\tab batch = \cf1\b new \cf2\b0 SpriteBatch();\line\tab\tab background = \cf1\b new \cf2\b0 Texture(\cf5\b "bg.png"\cf2\b0 );\line\tab\tab birds = \cf1\b new \cf2\b0 Texture[\cf4 2\cf2 ];\line\tab\tab\cf1\b if\cf2\b0 (birds[\cf4 0\cf2 ]==\cf1\b null \cf2\b0 && birds[\cf4 1\cf2 ]==\cf1\b null\cf2\b0 ) \{\line             birds[\cf4 0\cf2 ] = \cf1\b new \cf2\b0 Texture(\cf5\b "bird.png"\cf2\b0 );\line             birds[\cf4 1\cf2 ] = \cf1\b new \cf2\b0 Texture(\cf5\b "bird2.png"\cf2\b0 );\line         \}\line         topTube = \cf1\b new \cf2\b0 Texture(\cf5\b "toptube.png"\cf2\b0 );\line         bottomTube = \cf1\b new \cf2\b0 Texture(\cf5\b "bottomtube.png"\cf2\b0 );\line\tab\tab maxTubeOffset = Gdx.graphics.getHeight()/\cf4 2 \cf2 - gap/\cf4 2 \cf2 -\cf4 100\cf2 ;\line\tab\tab randomGenerator = \cf1\b new \cf2\b0 Random();\line\tab\tab distanceBetweenTubes = Gdx.graphics.getWidth()*\cf4 3\cf2 /\cf4 4\cf2 ;\line\tab\tab topTubeRectangles = \cf1\b new \cf2\b0 Rectangle[numberOfTubes];\line\tab\tab bottomTubeRectangle = \cf1\b new \cf2\b0 Rectangle[numberOfTubes];\line\tab\tab font = \cf1\b new \cf2\b0 BitmapFont();\line\tab\tab font.setColor(Color.WHITE);\line\tab\tab font.getData().setScale(\cf4 10\cf2 );\line\line\tab\tab startGame();\line\line\line\tab\}\line\line\tab\cf1\b public void \cf2\b0 startGame()\{\line\line\tab\tab birdY = Gdx.graphics.getHeight()/\cf4 2 \cf2 - birds[\cf4 0\cf2 ].getHeight()/\cf4 2\cf2 ;\line\tab\tab\cf1\b for \cf2\b0 (\cf1\b int \cf2\b0 i = \cf4 0\cf2 ;i<numberOfTubes;i++)\{\line\tab\tab\tab tubeOffset[i] = (randomGenerator.nextFloat()-\cf4 0.5f\cf2 ) * (Gdx.graphics.getHeight()-gap-\cf4 200\cf2 );\line\tab\tab\tab tubex[i] = Gdx.graphics.getWidth()/\cf4 2\cf2 -topTube.getWidth()/\cf4 2 \cf2 + Gdx.graphics.getWidth()+i*distanceBetweenTubes;\line\line\line\tab\tab\tab topTubeRectangles[i] = \cf1\b new \cf2\b0 Rectangle();\line\tab\tab\tab bottomTubeRectangle[i]= \cf1\b new \cf2\b0 Rectangle();\line\tab\tab\}\line\tab\}\line\line\tab @Override\line\tab\cf1\b public void \cf2\b0 render () \{\line\tab\tab batch.begin();\line\tab\tab batch.draw(background, \cf4 0\cf2 , \cf4 0\cf2 , Gdx.graphics.getWidth(), Gdx.graphics.getHeight());\line\tab\tab\cf1\b if\cf2\b0 (gameState ==\cf4 1\cf2 )\{\line             \cf1\b if\cf2\b0 (tubex[scoringTube] < Gdx.graphics.getWidth() / \cf4 2\cf2 )\{\line\tab\tab\tab\tab score++;\line\tab\tab\tab\tab Gdx.app.log(\cf5\b "Score"\cf2\b0 ,String.valueOf(score));\line\line\tab\tab\tab\tab\cf1\b if\cf2\b0 (scoringTube < numberOfTubes - \cf4 1\cf2 )\{\line\tab\tab\tab\tab\tab scoringTube++;\line\tab\tab\tab\tab\}\cf1\b else\cf2\b0\{\line\tab\tab\tab\tab\tab scoringTube = \cf4 0\cf2 ;\line\tab\tab\tab\tab\}\line\line\tab\tab\tab\}\line\line\tab\tab\tab\cf1\b if\cf2\b0 (Gdx.input.justTouched())\{\line\tab\tab\tab\tab velocity = -\cf4 17\cf2 ;\line\line\line\tab\tab\tab\}\line\tab\tab\tab\cf1\b for \cf2\b0 (\cf1\b int \cf2\b0 i = \cf4 0\cf2 ;i<numberOfTubes;i++) \{\line\tab\tab\tab\tab\cf1\b if\cf2\b0 (tubex[i] < -topTube.getWidth())\{\line\line\tab\tab\tab\tab\tab tubex[i] += numberOfTubes * distanceBetweenTubes;\line\tab\tab\tab\tab\tab tubeOffset[i] = (randomGenerator.nextFloat()-\cf4 0.5f\cf2 ) * (Gdx.graphics.getHeight()-gap-\cf4 200\cf2 );\line\tab\tab\tab\tab\}\cf1\b else \cf2\b0\{\line\line\line\tab\tab\tab\tab\tab tubex[i] = tubex[i] - tubeVelocity;\line\tab\tab\tab\tab\}\line\line\tab\tab\tab\tab batch.draw(topTube, tubex[i], Gdx.graphics.getHeight() / \cf4 2 \cf2 + gap / \cf4 2 \cf2 + tubeOffset[i]);\line\tab\tab\tab\tab batch.draw(bottomTube, tubex[i], Gdx.graphics.getHeight() / \cf4 2 \cf2 - gap / \cf4 2 \cf2 - bottomTube.getHeight() + tubeOffset[i]);\line\line                topTubeRectangles[i] = \cf1\b new \cf2\b0 Rectangle(tubex[i],Gdx.graphics.getHeight() / \cf4 2 \cf2 + gap / \cf4 2 \cf2 + tubeOffset[i],topTube.getWidth(),topTube.getHeight() );\line\tab\tab\tab\tab bottomTubeRectangle[i] = \cf1\b new \cf2\b0 Rectangle(tubex[i], Gdx.graphics.getHeight() / \cf4 2 \cf2 - gap / \cf4 2 \cf2 - bottomTube.getHeight() + tubeOffset[i],bottomTube.getWidth(),bottomTube.getHeight());\line\line\tab\tab\tab\}\line\tab\tab\tab\cf1\b if\cf2\b0 (birdY >\cf4 0 \cf2 )\{\line\tab\tab\tab\tab velocity = velocity + gravity;\line\tab\tab\tab\tab birdY -= velocity;\line\tab\tab\tab\}\cf1\b else\cf2\b0\{\line\tab\tab\tab\tab gameState = \cf4 2\cf2 ;\line\tab\tab\tab\}\line\tab\tab\}\cf1\b else if\cf2\b0 (gameState == \cf4 0\cf2 ) \{\line\tab\tab\tab\cf1\b if\cf2\b0 (Gdx.input.justTouched())\{\line\tab\tab\tab\tab gameState = \cf4 1\cf2 ;\line\tab\tab\tab\}\line\tab\tab\}\cf1\b else if\cf2\b0 (gameState == \cf4 2\cf2 )\{\line\line\line\tab\tab\tab batch.draw(gameover,Gdx.graphics.getWidth()/\cf4 2\cf2 -gameover.getWidth()/\cf4 2\cf2 ,Gdx.graphics.getHeight()/\cf4 2\cf2 -gameover.getHeight()/\cf4 2\cf2 );\line\tab\tab\tab\cf1\b if\cf2\b0 (Gdx.input.justTouched())\{\line\tab\tab\tab\tab gameState = \cf4 1\cf2 ;\line\tab\tab\tab\tab startGame();\line\tab\tab\tab\tab score = \cf4 0\cf2 ;\line\tab\tab\tab\tab scoringTube = \cf4 0\cf2 ;\line\tab\tab\tab\tab velocity = \cf4 0\cf2 ;\line                 \cf3\i // todo : start main activity again .\line\line\tab\tab\tab\cf2\i0\}\line\line\tab\tab\}\line\line\tab\tab\cf1\b if\cf2\b0 (flapState ==\cf4 0\cf2 )\{\line\tab\tab\tab flapState = \cf4 1\cf2 ;\line\tab\tab\}\cf1\b else\cf2\b0\{\line\tab\tab\tab flapState = \cf4 0\cf2 ;\line\tab\tab\}\line\line\line\tab\tab batch.draw(birds[flapState],Gdx.graphics.getWidth()/\cf4 2 \cf2 - birds[flapState].getWidth() / \cf4 2\cf2 ,birdY);\line\tab\tab font.draw(batch,String.valueOf(score),\cf4 100\cf2 ,\cf4 200\cf2 );\line\line\tab\tab batch.end();\line\line\tab\tab birdCircle.set(Gdx.graphics.getWidth() / \cf4 2\cf2 ,birdY + birds[flapState].getHeight()/\cf4 2\cf2 ,birds[flapState].getWidth()/\cf4 2\cf2 );\line\tab\tab\cf3\i //shapeRenderer.begin(ShapeRenderer.ShapeType.Filled);\line\tab\tab //shapeRenderer.setColor(Color.RED);\line\tab\tab //shapeRenderer.circle(birdCircle.x,birdCircle.y,birdCircle.radius);\line\line\tab\tab\cf1\b\i0 for \cf2\b0 (\cf1\b int \cf2\b0 i = \cf4 0\cf2 ;i<numberOfTubes;i++) \{\line\tab\tab\cf3\i //\tab shapeRenderer.rect(tubex[i],Gdx.graphics.getHeight() / 2 + gap / 2 + tubeOffset[i],topTube.getWidth(),topTube.getHeight());\line\tab\tab //\tab shapeRenderer.rect(tubex[i], Gdx.graphics.getHeight() / 2 - gap / 2 - bottomTube.getHeight() + tubeOffset[i],bottomTube.getWidth(),bottomTube.getHeight());\line\line\tab\tab\tab\cf1\b\i0 if\cf2\b0 (Intersector.overlaps(birdCircle,topTubeRectangles[i]) || Intersector.overlaps(birdCircle,bottomTubeRectangle[i]))\{\line\tab\tab\tab\tab gameState = \cf4 2\cf2 ;\line\tab\tab\tab\}\line\line\tab\tab\}\line\line\tab\tab\cf3\i //shapeRenderer.end();\line\tab\cf2\i0\}\line\line\}\line\par

\pard\sa200\sl276\slmult1\cf0\f1\fs22\par
}
 